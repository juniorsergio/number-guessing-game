{"mappings":"AAAA,IAAIA,aAAe,GACfC,UAAY,GACZC,YAAc,GACdC,cAAgB,EAChBC,kBAAmB,E,eAoBNC,gBAEb,MAAAC,QAAoBC,MAAK,6DAAAC,kBAAAC,cACzB,GAAc,MAAdH,EAAaI,OAGjB,YAFCC,cAAAC,YAAA,MAAAN,EAAAI,QASG,MAAMG,QAAQP,EAAOQ,OACrBd,aAAWa,EAAAE,MACXJ,cAAcC,YAAA,U,UAadI,kBAAeC,GAClBA,EAAAC,iBAED,MAAAC,EAAAC,OAAAnB,WAQI,IAAAoB,EAAM,GAENpB,UAAY,GAGeoB,E,eAAVF,EACb,UAGAnB,aAAkBmB,EAAK,OAG3B,UACHR,cAAAC,YAAAS,GAAAF,GAEDG,e,CAeC,SAAAC,iBAAAC,GAED,MAAAT,EAAAK,OAAAI,EAAAT,OAMQA,EAAQP,WAAMP,UAAW,GACrBc,EAAAN,WACAgB,MAAO,sCAAchB,cAGzBR,UAAOuB,EAAQT,M,+BAuBbW,sBAEcC,SAAOC,iBAAA,qBACjBC,UAAYzB,iB,MAClB0B,EAAUH,SAAYC,iBAAW,kB,EAE1BC,SAAKzB,iB,EACRW,MAAMd,UACE0B,SAAYC,iBAAG,mBAEnBC,SACO,KADC5B,WACIG,gB,qBAQV2B,EAAAC,EAAAC,G,gBAEDF,GAAAC,GAAAE,SAAAD,G,iBACa/B,YAAmBmB,G,6BA2B7CC,gBACH,MAAAa,EAAAR,SAAAS,eAAA,iB,4wBA7KDV,sBACArB","sources":["scripts/functions.js"],"sourcesContent":["var randomNumber = 42\r\nvar userGuess = ''\r\nvar displayInfo = {}\r\nvar displayNumber = 0\r\nvar isNewGameAllowed = false\r\n\r\nsetDisabledElements()\r\nhandleNewGame()\r\n\r\n/* \r\n    Função chamada na inicialização da página e ao clicar no botão 'NOVA PARTIDA'\r\n    A partir da API fetch nativa do Javascript, uma requisição GET é realizada ao endpoint fornecido\r\n    na descrição do problema. Qualquer status de retorno diferente de 200 faz com que o display seja\r\n    renderizado como erro. Caso contrário, o valor aleatório recebido é salvo e o display é exibido\r\n    com os valores zerados de inicialização.\r\n*/\r\nasync function handleNewGame(){\r\n    const response = await fetch(`https://us-central1-ss-devops.cloudfunctions.net/rand?min=${lowerLimit}&max=${upperLimit}`)\r\n    \r\n    if(response.status !== 200){\r\n        changeDisplay(textDisplay['error'], response.status)\r\n        return\r\n    }\r\n    \r\n    const data = await response.json()\r\n\r\n    randomNumber = data.value\r\n    changeDisplay(textDisplay['default'], 0)\r\n}\r\n\r\n/*\r\n    Ao clicar no botão 'ENVIAR', a seguinte função é chamada. A partir do palpite dado pelo usuário,\r\n    o display é atualizado conforme especificação e a variável que armazena o palpite (userGuess) é zerada.\r\n*/\r\nfunction handleGuessSubmit(event){\r\n    event.preventDefault()\r\n\r\n    const guess = Number(userGuess)\r\n    let id = ''\r\n    userGuess = ''\r\n\r\n    if (randomNumber === guess) {\r\n        id = 'success'\r\n    }\r\n    else if (randomNumber < guess) {\r\n        id = 'less'\r\n    }\r\n    else {\r\n        id = 'greater'\r\n    }\r\n\r\n    changeDisplay(textDisplay[id], guess)\r\n    addLedDisplay()\r\n}\r\n\r\n/*\r\n    Sempre que o usuário digita algum caracter númerico no campo de input, essa função é chamada. Caso\r\n    o input seja menor do que o limite inferior, o campo é zerado. Caso seja maior que o limite superior,\r\n    um alerta é emitido para notificar o usuário. Se o input não se encaixa em nenhum desses casos, significa\r\n    que o valor é válido e a váriavel do palpite é atualizada. Ao fim, os elementos correspondentes são\r\n    atualizados.\r\n*/\r\nfunction handleGuessInput(input){\r\n    const value = Number(input.value)\r\n\r\n    if (value < lowerLimit){\r\n        userGuess = ''\r\n    }\r\n    else if (value > upperLimit){     \r\n        alert(`O número deve ser menor ou igual a ${upperLimit}`)\r\n    }\r\n    else {\r\n        userGuess = input.value\r\n    }\r\n\r\n    setDisabledElements()\r\n}\r\n\r\n/*\r\n    Função responsável por definir se determinados elementos devem ser habilitados para o usuário, a partir\r\n    do estado atual do jogo. Além disso, define o valor exibido no campo de input como o palpite armazenado\r\n    no momento.\r\n*/\r\nfunction setDisabledElements(){\r\n    const NewGameButton = document.querySelectorAll('.newGameButton')[0]\r\n    NewGameButton.disabled = !isNewGameAllowed\r\n\r\n    const GuessInput = document.querySelectorAll('.guessInput')[0]\r\n    GuessInput.disabled = isNewGameAllowed\r\n    GuessInput.value = userGuess\r\n\r\n    const GuessSubmit = document.querySelectorAll('.guessSubmit')[0]\r\n    GuessSubmit.disabled = (userGuess === '' || isNewGameAllowed)\r\n}\r\n\r\n/*\r\n    Na constante \"ledLight\" são definidos os números correspondentes a um LED estar acesso ou não. Caso o segmento\r\n    de LED se ative para aquele dígito, é verificado se um novo jogo é permitido, já que é apenas nessa situação\r\n    que o segmento pode assumir as cores de sucesso ou erro.\r\n*/\r\nfunction getLedType(key, className, digit){\r\n    if (ledLight[key][className].includes(digit)){\r\n        if (isNewGameAllowed){\r\n            return displayInfo.id\r\n        }\r\n        \r\n        return 'active'\r\n    }\r\n\r\n    return 'disabled'\r\n}\r\n\r\n/*\r\n    Função responsável por renderizar o LED de 7 segmentos de acordo com o palpite atual do usuário.\r\n\r\n    O LED é divido em 3 partes: top, middle e bottom. As divs 'top' e 'bottom' são divididas em outras 3 partes,\r\n    uma para cada LED. Como a div 'middle' só possui um LED, não é necessário que ele tenha um elemento filho.\r\n    Para que cada div tivesse o formato de LED apresentado no figma, a manipulação via .css foi suficiente.\r\n\r\n    Inicialmente, o palpite atual do usuário é transformado em string para ele possa ser convertido em um array\r\n    iterável. Para cada dígito, um LED diferente é renderizado. O elemento pai (displayNumber) é sempre resetado.\r\n\r\n    A partir da lógica implementada na função getLedType(), a cor de cada segmento é definida para que o dígito\r\n    desejado seja formado.\r\n*/\r\nfunction addLedDisplay(){\r\n    const displayNumberElement = document.getElementById('displayNumber')\r\n    displayNumberElement.innerHTML = ''\r\n\r\n    const digits = String(displayNumber).split('')\r\n\r\n    for (const digit of digits){\r\n        const ledNumber = document.createElement('div')\r\n        ledNumber.className = 'ledNumber'\r\n    \r\n        Object.keys(ledLight).forEach((key) => {\r\n            const newZone = document.createElement('div')\r\n            newZone.className = key\r\n    \r\n            if (key !== 'middle'){\r\n                Object.keys(ledLight[key]).forEach(secKey => {       \r\n                    const newLedSegment = document.createElement('div')\r\n                    newLedSegment.className = secKey\r\n\r\n                    const style = getLedType(key, secKey, digit)\r\n                    newLedSegment.style.borderTopColor = ledDisplayColor[style]\r\n\r\n                    newZone.appendChild(newLedSegment)\r\n                })\r\n            }\r\n            else {\r\n                const style = getLedType(key, key, digit)\r\n                newZone.className += ` ${style}`\r\n                newZone.style.background = ledDisplayColor[style]\r\n            }\r\n    \r\n            ledNumber.appendChild(newZone)\r\n        })\r\n    \r\n        displayNumberElement.appendChild(ledNumber)\r\n    }\r\n}\r\n\r\n/*\r\n    A partir da constante \"textDisplay\", o parâmetro \"gameState\" dessa função é definido. A partir dele, o LED\r\n    de 7 segmentos e o texto acima dele é atualizado, bem como algumas variáveis globais que armazenam o estado\r\n    atual do jogo. A cor do texto também é atualizada de acordo com esse estado.\r\n*/\r\nfunction changeDisplay(gameState, number){\r\n    displayNumber = number\r\n    displayInfo = gameState\r\n    isNewGameAllowed = (gameState.id === 'success' || gameState.id === 'error')\r\n    \r\n    setDisabledElements()\r\n    addLedDisplay()\r\n\r\n    const displayTextElement = document.getElementById('displayText')\r\n    displayTextElement.style.color = gameState.color\r\n    displayTextElement.textContent = gameState.text\r\n}"],"names":["randomNumber","userGuess","displayInfo","displayNumber","isNewGameAllowed","handleNewGame","response","fetch","lowerLimit","upperLimit","status","changeDisplay","textDisplay","data","json","value","handleGuessSubmit","event","preventDefault","guess","Number","id","addLedDisplay","handleGuessInput","input","alert","setDisabledElements","document","querySelectorAll","disabled","GuessInput","key","className","digit","includes","displayNumberElement","getElementById"],"version":3,"file":"index.17137322.js.map"}