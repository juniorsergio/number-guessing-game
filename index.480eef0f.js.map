{"mappings":"AAAA,IAAIA,aAAe,GACfC,UAAY,GACZC,YAAc,GACdC,cAAgB,EAChBC,iBAAkB,EAKtBC,eAAeC,iBACX,MAAMC,QAAiBC,MAAM,6DAA6DC,kBAAkBC,cAE5G,GAAuB,MAApBH,EAASI,OAER,YADAC,cAAcC,iBAAwB,MAAGN,EAASI,QAItD,MAAMG,QAAaP,EAASQ,OAC5BC,QAAQC,IAAIH,EAAKI,OAEjBlB,aAAec,EAAKI,MACpBN,cAAcC,iBAA0B,QAAG,E,CAG/C,SAASM,gBAAgBC,GACrBA,EAAMC,iBAEN,MAAMC,EAAQC,OAAOtB,WACrB,IAAIuB,EAAK,GACTvB,UAAY,GAGRuB,EADAxB,eAAiBsB,EACZ,UAEAtB,aAAesB,EACf,OAGA,UAGTV,cAAcC,iBAAiBW,GAAKF,GACpCG,e,CAGJ,SAASC,kBAAkBC,GACvB,MAAMT,EAAQK,OAAOI,EAAMT,OAEvBA,EAAQT,YACRR,UAAY,GACZ0B,EAAMC,kBAAkB,qCACxBD,EAAME,kBAEDX,EAAQR,YACbiB,EAAMC,kBAAkB,uCACxBD,EAAME,mBAGN5B,UAAY6B,OAAOZ,GACnBS,EAAMC,kBAAkB,KAG5BG,qB,CAGJ,SAASA,sBACeC,SAASC,iBAAiB,mBAAmB,GACrDC,UAAY9B,gBAExB,MAAM+B,EAAaH,SAASC,iBAAiB,eAAe,GAC5DE,EAAWD,SAAW9B,gBACtB+B,EAAWjB,MAAQjB,UAEC+B,SAASC,iBAAiB,gBAAgB,GAClDC,SAA0B,KAAdjC,WAAoBG,e,CAGhD,SAASgC,WAAWC,EAAKC,EAAWC,GAChC,OAAIC,SAASH,GAAKC,GAAWG,SAASF,GAC9BnC,gBACOF,YAAYsB,GAGhB,SAGJ,U,CAGX,SAASC,gBACL,MAAMiB,EAAuBV,SAASW,eAAe,iBACrDD,EAAqBE,UAAY,GACjC,MAAMC,EAASf,OAAO3B,eAAe2C,MAAM,IAE3C,IAAK,MAAMP,KAASM,EAAO,CACvB,MAAME,EAAYf,SAASgB,cAAc,OACzCD,EAAUT,UAAY,YAEtBW,OAAOC,KAAKV,UAAUW,SAASd,IAC3B,MAAMe,EAAUpB,SAASgB,cAAc,OAGvC,GAFAI,EAAQd,UAAYD,EAER,WAARA,EACAY,OAAOC,KAAKV,SAASH,IAAMc,SAAQE,IAC/B,MAAMC,EAAgBtB,SAASgB,cAAc,OAC7CM,EAAchB,UAAYe,EAE1B,MAAME,EAAQnB,WAAWC,EAAKgB,EAAQd,GACtCe,EAAcC,MAAMC,eAAiBC,gBAAgBF,GAErDH,EAAQM,YAAYJ,EAAc,QAGrC,CACD,MAAMC,EAAQnB,WAAWC,EAAKA,EAAKE,GACnCa,EAAQd,WAAa,IAAIiB,IACzBH,EAAQG,MAAMI,WAAaF,gBAAgBF,E,CAG/CR,EAAUW,YAAYN,EAAQ,IAGlCV,EAAqBgB,YAAYX,E,EAIzC,SAASnC,cAAcgD,EAAMC,GACzB1D,cAAgB0D,EAChB3D,YAAc0D,EACdxD,gBAA+B,YAAZwD,EAAKpC,IAAgC,UAAZoC,EAAKpC,GAEjDO,sBACAN,gBAEA,MAAMqC,EAAqB9B,SAASW,eAAe,eACnDmB,EAAmBP,MAAMQ,MAAQH,EAAKG,MACtCD,EAAmBE,YAAcJ,EAAKK,I,CAlI1ClC,sBACAzB","sources":["scripts/functions.js"],"sourcesContent":["var randomNumber = 42\r\nvar userGuess = ''\r\nvar displayInfo = {}\r\nvar displayNumber = 0\r\nvar isReloadAllowed = false\r\n\r\nsetDisabledElements()\r\nhandleNewMatch()\r\n\r\nasync function handleNewMatch(){\r\n    const response = await fetch(`https://us-central1-ss-devops.cloudfunctions.net/rand?min=${lowerLimit}&max=${upperLimit}`)\r\n    \r\n    if(response.status !== 200){\r\n        changeDisplay(textDisplayColor['error'], response.status)\r\n        return\r\n    }\r\n    \r\n    const data = await response.json()\r\n    console.log(data.value)\r\n\r\n    randomNumber = data.value\r\n    changeDisplay(textDisplayColor['default'], 0)\r\n}\r\n\r\nfunction handleUserGuess(event){\r\n    event.preventDefault()\r\n\r\n    const guess = Number(userGuess)\r\n    let id = ''\r\n    userGuess = ''\r\n\r\n    if (randomNumber === guess) {\r\n        id = 'success'\r\n    }\r\n    else if (randomNumber < guess) {\r\n        id = 'less'\r\n    }\r\n    else {\r\n        id = 'greater'\r\n    }\r\n\r\n    changeDisplay(textDisplayColor[id], guess)\r\n    addLedDisplay()\r\n}\r\n\r\nfunction handleNumberInput(input){\r\n    const value = Number(input.value)\r\n\r\n    if (value < lowerLimit){\r\n        userGuess = ''\r\n        input.setCustomValidity('O número não pode ser menor que 1')\r\n        input.reportValidity()\r\n    }\r\n    else if (value > upperLimit){ \r\n        input.setCustomValidity('O número não pode ser maior que 300')\r\n        input.reportValidity()\r\n    }\r\n    else{\r\n        userGuess = String(value)\r\n        input.setCustomValidity('')\r\n    }\r\n\r\n    setDisabledElements()\r\n}\r\n\r\nfunction setDisabledElements(){\r\n    const MatchButton = document.querySelectorAll('.newMatchButton')[0]\r\n    MatchButton.disabled = !isReloadAllowed\r\n\r\n    const GuessInput = document.querySelectorAll('.guessInput')[0]\r\n    GuessInput.disabled = isReloadAllowed\r\n    GuessInput.value = userGuess\r\n\r\n    const GuessSubmit = document.querySelectorAll('.guessSubmit')[0]\r\n    GuessSubmit.disabled = (userGuess === '' || isReloadAllowed)\r\n}\r\n\r\nfunction getLedType(key, className, digit){\r\n    if (ledLight[key][className].includes(digit)){\r\n        if (isReloadAllowed){\r\n            return displayInfo.id\r\n        }\r\n        \r\n        return 'active'\r\n    }\r\n\r\n    return 'disabled'\r\n}\r\n\r\nfunction addLedDisplay(){\r\n    const displayNumberElement = document.getElementById('displayNumber')\r\n    displayNumberElement.innerHTML = ''\r\n    const digits = String(displayNumber).split('')\r\n\r\n    for (const digit of digits){\r\n        const ledNumber = document.createElement('div')\r\n        ledNumber.className = 'ledNumber'\r\n    \r\n        Object.keys(ledLight).forEach((key) => {\r\n            const newZone = document.createElement('div')\r\n            newZone.className = key\r\n    \r\n            if (key !== 'middle'){\r\n                Object.keys(ledLight[key]).forEach(secKey => {       \r\n                    const newLedSegment = document.createElement('div')\r\n                    newLedSegment.className = secKey\r\n\r\n                    const style = getLedType(key, secKey, digit)\r\n                    newLedSegment.style.borderTopColor = ledDisplayColor[style]\r\n\r\n                    newZone.appendChild(newLedSegment)\r\n                })\r\n            }\r\n            else {\r\n                const style = getLedType(key, key, digit)\r\n                newZone.className += ` ${style}`\r\n                newZone.style.background = ledDisplayColor[style]\r\n            }\r\n    \r\n            ledNumber.appendChild(newZone)\r\n        })\r\n    \r\n        displayNumberElement.appendChild(ledNumber)\r\n    }\r\n}\r\n\r\nfunction changeDisplay(info, number){\r\n    displayNumber = number\r\n    displayInfo = info\r\n    isReloadAllowed = (info.id === 'success' || info.id === 'error')\r\n    \r\n    setDisabledElements()\r\n    addLedDisplay()\r\n\r\n    const displayTextElement = document.getElementById('displayText')\r\n    displayTextElement.style.color = info.color\r\n    displayTextElement.textContent = info.text\r\n}"],"names":["randomNumber","userGuess","displayInfo","displayNumber","isReloadAllowed","async","handleNewMatch","response","fetch","lowerLimit","upperLimit","status","changeDisplay","textDisplayColor","data","json","console","log","value","handleUserGuess","event","preventDefault","guess","Number","id","addLedDisplay","handleNumberInput","input","setCustomValidity","reportValidity","String","setDisabledElements","document","querySelectorAll","disabled","GuessInput","getLedType","key","className","digit","ledLight","includes","displayNumberElement","getElementById","innerHTML","digits","split","ledNumber","createElement","Object","keys","forEach","newZone","secKey","newLedSegment","style","borderTopColor","ledDisplayColor","appendChild","background","info","number","displayTextElement","color","textContent","text"],"version":3,"file":"index.480eef0f.js.map"}